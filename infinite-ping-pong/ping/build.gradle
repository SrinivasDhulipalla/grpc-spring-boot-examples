////////////////////////
// VARIABLES
//
def gradleVersion = "$System.env.GRADLE_VERSION"
def grpcVersion = "$System.env.GRPC_JAVA_VERSION"
def protobufVersion = "$System.env.PROTOBUF_VERSION"
def protocPath = "$System.env.PROTOC_HOME"
def grpcPluginPath = "$System.env.GRPC_JAVA_PLUGIN_HOME"

apply plugin: 'java'
apply plugin: 'war'
apply plugin: 'application'
apply plugin: 'org.springframework.boot'
apply plugin: 'com.google.protobuf'

buildscript {
    repositories {
        mavenCentral()
        jcenter()
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:1.5.10.RELEASE"
        classpath "com.google.protobuf:protobuf-gradle-plugin:0.8.5"
    }
}

repositories {
    maven { url "http://repo.springsource.org/libs-snapshot" }
    maven { url "http://repo.springsource.org/plugins-release" }
}

sourceCompatibility = 1.8
targetCompatibility = 1.8


dependencies {
    // spring
    compile "org.springframework.boot:spring-boot-starter-web"
    compile "org.springframework.boot:spring-boot-starter-actuator"

    // grpc
    compile group: 'io.grpc', name: 'grpc-netty', version: "$grpcVersion"
  	compile group: 'io.grpc', name: 'grpc-protobuf', version: "$grpcVersion"
 	compile group: 'io.grpc', name: 'grpc-stub', version: "$grpcVersion"
    compile group: 'com.google.api.grpc', name: 'proto-google-common-protos', version: '1.5.0'
    compile 'org.lognet:grpc-spring-boot-starter:2.2.0'

    // for application itself
    compile group: 'org.projectlombok', name: 'lombok', version: '1.16.20'

    providedRuntime 'org.springframework.boot:spring-boot-starter-tomcat'
}

sourceSets {
    main {
        proto {
            srcDir 'src/main/proto'
        }
    }
}

protobuf {
    protoc {
        path = "${protocPath}"
    }
    plugins {
        grpc {
            path = "${grpcPluginPath}"
        }
    }

    generateProtoTasks {
        all().each { task ->
            task.builtins {
                java {
                    outputSubDir = 'generated'
                }
            }
            task.plugins {
                grpc {
                    outputSubDir = 'generated'
                }
            }
        }
    }
    generatedFilesBaseDir = "$projectDir/src/"
}

task cleanGenerated{
    doFirst{
        delete("$projectDir/src/main/generated")
    }
}
clean.dependsOn cleanGenerated

task getDependencies(type: Exec) {
    configurations.testRuntime.files
    commandLine 'echo', 'Downloaded all dependencies'
}

task wrapper(type: Wrapper) {
    description = 'Generates gradlew[.bat] scripts'
    gradleVersion = "$gradleVersion"
}

jar {
    baseName = 'ping-service'
    version =  '0.1.0'
}

mainClassName = 'ping.Application'

defaultTasks 'build'